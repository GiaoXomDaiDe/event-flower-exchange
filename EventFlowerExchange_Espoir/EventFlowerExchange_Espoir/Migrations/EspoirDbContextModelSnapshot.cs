// <auto-generated />
using System;
using EventFlowerExchange_Espoir.DatabaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventFlowerExchange_Espoir.Migrations
{
    [DbContext(typeof(EspoirDbContext))]
    partial class EspoirDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IsEmailConfirm")
                        .HasColumnType("int");

                    b.Property<int>("IsSeller")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586A4DAAC89");

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            AccountId = "AC00000001",
                            Address = "HCM",
                            Birthday = new DateOnly(1999, 10, 10),
                            Email = "nghalam1210@gmail.com",
                            FullName = "Admin Văn 1",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0123456789",
                            Role = 1,
                            Status = 1,
                            Username = "user@1"
                        },
                        new
                        {
                            AccountId = "AC00000002",
                            Address = "HN",
                            Birthday = new DateOnly(1998, 11, 11),
                            Email = "duchao696@gmail.com",
                            FullName = "Admin Văn 2",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0123456788",
                            Role = 1,
                            Status = 1,
                            Username = "user@2"
                        },
                        new
                        {
                            AccountId = "AC00000003",
                            Address = "HN",
                            Birthday = new DateOnly(1989, 11, 20),
                            Email = "nhattulam12102003@gmail.com",
                            FullName = "Nguyen Minh Phuong",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 1,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987654322",
                            Role = 2,
                            Status = 1,
                            Username = "user@3"
                        },
                        new
                        {
                            AccountId = "AC00000004",
                            Address = "ND",
                            Birthday = new DateOnly(1983, 2, 14),
                            Email = "customer2@gmail.com",
                            FullName = "Dang Phuong Thao",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987654333",
                            Role = 2,
                            Status = 1,
                            Username = "user@4"
                        },
                        new
                        {
                            AccountId = "AC00000005",
                            Address = "BD",
                            Birthday = new DateOnly(1990, 1, 2),
                            Email = "customer3@gmail.com",
                            FullName = "Tran Hoang Phu",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987654444",
                            Role = 2,
                            Status = 1,
                            Username = "user@5"
                        },
                        new
                        {
                            AccountId = "AC00000006",
                            Address = "HCM",
                            Birthday = new DateOnly(1979, 7, 28),
                            Email = "customer4@gmail.com",
                            FullName = "Tran Quoc Tuan",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987655555",
                            Role = 2,
                            Status = 1,
                            Username = "user@6"
                        },
                        new
                        {
                            AccountId = "AC00000007",
                            Address = "PY",
                            Birthday = new DateOnly(2003, 5, 20),
                            Email = "anhnnqe170248@fpt.edu.vn",
                            FullName = "Truong Yen Nhi",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666666",
                            Role = 2,
                            Status = 1,
                            Username = "user@7"
                        },
                        new
                        {
                            AccountId = "AC00000011",
                            Address = "PT",
                            Birthday = new DateOnly(2001, 12, 20),
                            Email = "customer11@gmail.com",
                            FullName = "Tran Quoc",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666666",
                            Role = 2,
                            Status = 1,
                            Username = "user@8"
                        },
                        new
                        {
                            AccountId = "AC00000012",
                            Address = "NH",
                            Birthday = new DateOnly(2002, 8, 20),
                            Email = "customer12@gmail.com",
                            FullName = "Quoc Tuan",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666666",
                            Role = 2,
                            Status = 1,
                            Username = "user@9"
                        },
                        new
                        {
                            AccountId = "AC00000013",
                            Address = "TPHCM",
                            Birthday = new DateOnly(2002, 8, 20),
                            Email = "vietnam@gmail.com",
                            FullName = "Trương Tấn Sang",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666666",
                            Role = 2,
                            Status = 1,
                            Username = "user@10"
                        },
                        new
                        {
                            AccountId = "AC00000020",
                            Address = "Q9",
                            Birthday = new DateOnly(2002, 1, 20),
                            Email = "thanhdanhnguyenvinh@gmail.com",
                            FullName = "Nyn Anh",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987668876",
                            Role = 2,
                            Status = 1,
                            Username = "user@11"
                        },
                        new
                        {
                            AccountId = "AC00000021",
                            Address = "Q9",
                            Birthday = new DateOnly(2002, 1, 20),
                            Email = "customer21@gmail.com",
                            FullName = "Tran Bao",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987662566",
                            Role = 2,
                            Status = 1,
                            Username = "user@12"
                        },
                        new
                        {
                            AccountId = "AC00000022",
                            Address = "Q9",
                            Birthday = new DateOnly(2002, 1, 20),
                            Email = "student2@gmail.com",
                            FullName = "Quoc Toan",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987123666",
                            Role = 2,
                            Status = 1,
                            Username = "user@13"
                        },
                        new
                        {
                            AccountId = "AC00000023",
                            Address = "Q9",
                            Birthday = new DateOnly(2002, 1, 20),
                            Email = "student3@gmail.com",
                            FullName = "Van Anh",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987346666",
                            Role = 2,
                            Status = 1,
                            Username = "user@14"
                        },
                        new
                        {
                            AccountId = "AC00000024",
                            Address = "Q9",
                            Birthday = new DateOnly(1999, 1, 20),
                            Email = "student4@gmail.com",
                            FullName = "Yn Anh",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666456",
                            Role = 2,
                            Status = 1,
                            Username = "user@15"
                        },
                        new
                        {
                            AccountId = "AC00000025",
                            Address = "HN",
                            Birthday = new DateOnly(1989, 11, 20),
                            Email = "vuhuyhoangdeptrai@gmail.com",
                            FullName = "Ly Thien Huong",
                            Gender = 3,
                            IsEmailConfirm = 1,
                            IsSeller = 0,
                            Password = "u93zTwjKn5EGES4DRXBqHNgggYmp7amf/9rUl9lZnNM=",
                            PhoneNumber = "0987666400",
                            Role = 2,
                            Status = 1,
                            Username = "user@16"
                        });
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.CardProvider", b =>
                {
                    b.Property<string>("CardProviderName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CpfullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CPFullName");

                    b.HasKey("CardProviderName")
                        .HasName("PK__CardProv__3B8DEBCC39ECA32E");

                    b.ToTable("CardProviders");

                    b.HasData(
                        new
                        {
                            CardProviderName = "VietinBank",
                            CpfullName = "Ngân hàng TMCP Công thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Vietcombank",
                            CpfullName = "Ngân hàng TMCP Ngoại Thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "BIDV",
                            CpfullName = "Ngân hàng TMCP Đầu tư và Phát triển Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Agribank",
                            CpfullName = "Ngân hàng Nông nghiệp và Phát triển Nông thôn Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "OCB",
                            CpfullName = "Ngân hàng TMCP Phương Đông"
                        },
                        new
                        {
                            CardProviderName = "MBBank",
                            CpfullName = "Ngân hàng TMCP Quân đội"
                        },
                        new
                        {
                            CardProviderName = "Techcombank",
                            CpfullName = "Ngân hàng TMCP Kỹ thương Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "ACB",
                            CpfullName = "Ngân hàng TMCP Á Châu"
                        },
                        new
                        {
                            CardProviderName = "VPBank",
                            CpfullName = "Ngân hàng TMCP Việt Nam Thịnh Vượng"
                        },
                        new
                        {
                            CardProviderName = "TPBank",
                            CpfullName = "Ngân hàng TMCP Tiên Phong"
                        },
                        new
                        {
                            CardProviderName = "Sacombank",
                            CpfullName = "Ngân hàng TMCP Sài Gòn Thương Tín"
                        },
                        new
                        {
                            CardProviderName = "HDBank",
                            CpfullName = "Ngân hàng TMCP Phát triển Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "VietCapitalBank",
                            CpfullName = "Ngân hàng TMCP Bản Việt"
                        },
                        new
                        {
                            CardProviderName = "SCB",
                            CpfullName = "Ngân hàng TMCP Sài Gòn"
                        },
                        new
                        {
                            CardProviderName = "VIB",
                            CpfullName = "Ngân hàng TMCP Quốc tế Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "SHB",
                            CpfullName = "Ngân hàng TMCP Sài Gòn - Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "Eximbank",
                            CpfullName = "Ngân hàng TMCP Xuất Nhập khẩu Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "MSB",
                            CpfullName = "Ngân hàng TMCP Hàng Hải"
                        },
                        new
                        {
                            CardProviderName = "CAKE",
                            CpfullName = "TMCP Việt Nam Thịnh Vượng - Ngân hàng số CAKE by VPBank"
                        },
                        new
                        {
                            CardProviderName = "Ubank",
                            CpfullName = "NgânTMCP Việt Nam Thịnh Vượng - Ngân hàng số Ubank by VPBank"
                        },
                        new
                        {
                            CardProviderName = "Timo",
                            CpfullName = "Ngân hàng số Timo by Ban Viet Bank (Timo by Ban Viet Bank)"
                        },
                        new
                        {
                            CardProviderName = "ViettelMoney",
                            CpfullName = "Tổng Công ty Dịch vụ số Viettel - Chi nhánh tập đoàn công nghiệp viễn thông Quân Đội"
                        },
                        new
                        {
                            CardProviderName = "VNPTMoney",
                            CpfullName = "VNPT Money"
                        },
                        new
                        {
                            CardProviderName = "SaigonBank",
                            CpfullName = "NgânNgân hàng TMCP Sài Gòn Công Thương"
                        },
                        new
                        {
                            CardProviderName = "BacABank",
                            CpfullName = "Ngân hàng TMCP Bắc Á"
                        },
                        new
                        {
                            CardProviderName = "PVcomBank",
                            CpfullName = "Ngân hàng TMCP Đại Chúng Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Oceanbank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Đại Dương"
                        },
                        new
                        {
                            CardProviderName = "NCB",
                            CpfullName = "Ngân hàng TMCP Quốc Dân"
                        },
                        new
                        {
                            CardProviderName = "ShinhanBank",
                            CpfullName = "Ngân hàng TNHH MTV Shinhan Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "ABBANK",
                            CpfullName = "Ngân hàng TMCP An Bình"
                        },
                        new
                        {
                            CardProviderName = "VietABank",
                            CpfullName = "Ngân hàng TMCP Việt Á"
                        },
                        new
                        {
                            CardProviderName = "NamABank",
                            CpfullName = "Ngân hàng TMCP Nam Á"
                        },
                        new
                        {
                            CardProviderName = "PGBank",
                            CpfullName = "Ngân hàng TMCP Xăng dầu Petrolimex"
                        },
                        new
                        {
                            CardProviderName = "VietBank",
                            CpfullName = "Ngân hàng TMCP Việt Nam Thương Tín"
                        },
                        new
                        {
                            CardProviderName = "BaoVietBank",
                            CpfullName = "Ngân hàng TMCP Bảo Việt"
                        },
                        new
                        {
                            CardProviderName = "SeABank",
                            CpfullName = "Ngân hàng TMCP Đông Nam Á"
                        },
                        new
                        {
                            CardProviderName = "COOPBANK",
                            CpfullName = "Ngân hàng Hợp tác xã Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "LienVietPostBank",
                            CpfullName = "Ngân hàng TMCP Bưu Điện Liên Việt"
                        },
                        new
                        {
                            CardProviderName = "KienLongBank",
                            CpfullName = "Ngân hàng TMCP Kiên Long"
                        },
                        new
                        {
                            CardProviderName = "KBank",
                            CpfullName = "Ngân hàng Đại chúng TNHH Kasikornbank"
                        },
                        new
                        {
                            CardProviderName = "KookminHN",
                            CpfullName = "Ngân hàng Kookmin - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "KEBHanaHCM",
                            CpfullName = "Ngân hàng KEB Hana – Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "KEBHANAHN",
                            CpfullName = "Công ty Tài chính TNHH MTV Mirae Asset (Việt Nam)"
                        },
                        new
                        {
                            CardProviderName = "Citibank",
                            CpfullName = "Ngân hàng Citibank, N.A. - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "KookminHCM",
                            CpfullName = "Ngân hàng Kookmin - Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "VBSP",
                            CpfullName = "Ngân hàng Chính sách Xã hội"
                        },
                        new
                        {
                            CardProviderName = "Woori",
                            CpfullName = "Ngân hàng TNHH MTV Woori Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "VRB",
                            CpfullName = "Ngân hàng Liên doanh Việt - Nga"
                        },
                        new
                        {
                            CardProviderName = "UnitedOverseas",
                            CpfullName = "Ngân hàng United Overseas - Chi nhánh TP. Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "StandardChartered",
                            CpfullName = "Ngân hàng TNHH MTV Standard Chartered Bank Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "PublicBank",
                            CpfullName = "Ngân hàng TNHH MTV Public Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "Nonghyup",
                            CpfullName = "Ngân hàng Nonghyup - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "IndovinaBank",
                            CpfullName = "Ngân hàng TNHH Indovina"
                        },
                        new
                        {
                            CardProviderName = "IBKHCM",
                            CpfullName = "Ngân hàng Công nghiệp Hàn Quốc - Chi nhánh TP. Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "IBKHN",
                            CpfullName = "Ngân hàng Công nghiệp Hàn Quốc - Chi nhánh Hà Nội"
                        },
                        new
                        {
                            CardProviderName = "HSBC",
                            CpfullName = "Ngân hàng TNHH MTV HSBC (Việt Nam)"
                        },
                        new
                        {
                            CardProviderName = "HongLeong",
                            CpfullName = "Ngân hàng TNHH MTV Hong Leong Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "GPBank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Dầu Khí Toàn Cầu"
                        },
                        new
                        {
                            CardProviderName = "DongABank",
                            CpfullName = "Ngân hàng TMCP Đông Á"
                        },
                        new
                        {
                            CardProviderName = "DBSBank",
                            CpfullName = "DBS Bank Ltd - Chi nhánh Thành phố Hồ Chí Minh"
                        },
                        new
                        {
                            CardProviderName = "CIMB",
                            CpfullName = "Ngân hàng TNHH MTV CIMB Việt Nam"
                        },
                        new
                        {
                            CardProviderName = "CBBank",
                            CpfullName = "Ngân hàng Thương mại TNHH MTV Xây dựng Việt Nam"
                        });
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EventID");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EcateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ECateID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventId")
                        .HasName("PK__Event__7944C8704F2A4B87");

                    b.HasIndex("EcateId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.EventCate", b =>
                {
                    b.Property<string>("EcateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ECateID");

                    b.Property<string>("Edesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EDesc");

                    b.Property<string>("Ename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EcateId")
                        .HasName("PK__EventCat__64EE8301B1E91710");

                    b.ToTable("EventCate", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<bool>("IsGoodReview")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6C7713F3E");

                    b.HasIndex("FlowerId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.Property<string>("FlowerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CateID");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("DateExpiration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FlowerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TagID");

                    b.Property<DateOnly?>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("FlowerId")
                        .HasName("PK__Flowers__97C47C3901C1A129");

                    b.HasIndex("AccountId");

                    b.HasIndex("CateId");

                    b.HasIndex("TagId");

                    b.ToTable("Flowers");

                    b.HasData(
                        new
                        {
                            FlowerId = "F000000001",
                            AccountId = "AC00000003",
                            Attachment = "null",
                            CateId = "FC00000001",
                            Condition = "New",
                            CreatedAt = new DateOnly(2024, 2, 14),
                            DateExpiration = "1 month",
                            Description = "Mini Sunflowers are a good option if you are looking for a different focal. They are ideal for bright floral arrangements.Mini Sunflowers are a good option if you are looking for a different focal. They are ideal for bright floral arrangements.",
                            FlowerName = "Mini Sun Flower",
                            IsDeleted = 0,
                            OldPrice = 10.0,
                            Price = 10.0,
                            Quantity = 100.0,
                            Size = "Bouquet",
                            Status = 1,
                            TagId = "empty",
                            UpdateBy = "null"
                        });
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerCate", b =>
                {
                    b.Property<string>("FcateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FCateID");

                    b.Property<string>("FcateDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FCateDesc");

                    b.Property<string>("FcateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FCateName");

                    b.Property<string>("FparentCateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FParentCateID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FcateId")
                        .HasName("PK__FlowerCa__9CB52A23207E59B9");

                    b.ToTable("FlowerCate", (string)null);

                    b.HasData(
                        new
                        {
                            FcateId = "FC00000001",
                            FcateDesc = "Not only do sunflowers resemble miniature suns, their blooms also follow the sun across the sky. They have their own biological clocks which help them to follow the sun as it moves from east to west during the day, and then move back to their original position at night.",
                            FcateName = "Sun Flower",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000002",
                            FcateDesc = "A symbol of love and beauty, roses have enchanted civilizations throughout history with their stunning blossoms and enchanting fragrance.",
                            FcateName = "Rose",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000003",
                            FcateDesc = "Known for their vibrant colors and elegant cup-shaped blooms, tulips symbolize perfect love and have a rich history in Europe, especially in the Netherlands.",
                            FcateName = "Tulip",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000004",
                            FcateDesc = "Lilies are associated with purity and refined beauty. They often grace weddings and special events with their delicate petals and strong fragrance.",
                            FcateName = "Lily",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000005",
                            FcateDesc = "Daisies symbolize innocence and purity. With their simple yet charming appearance, they are a favorite choice for gardens and bouquets.",
                            FcateName = "Daisy",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000006",
                            FcateDesc = "Orchids are exotic flowers that symbolize luxury, strength, and beauty. Their intricate blooms are admired worldwide for their stunning variety of shapes and colors.",
                            FcateName = "Orchid",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000007",
                            FcateDesc = "Chrysanthemums, known for their full, rich blooms, are symbols of happiness and long life. They are often used in celebrations in many cultures.",
                            FcateName = "Chrysanthemum",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000008",
                            FcateDesc = "A cheerful spring flower, daffodils symbolize renewal and hope. Their bright yellow petals bring joy after the long winter months.",
                            FcateName = "Daffodil",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000009",
                            FcateDesc = "Peonies are revered for their lush, full blooms and delicate scent. They are often associated with prosperity and romance.",
                            FcateName = "Peony",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000010",
                            FcateDesc = "Lavender is a beloved herb and flower known for its calming fragrance. It is often used in aromatherapy and symbolizes tranquility and serenity.",
                            FcateName = "Lavender",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        },
                        new
                        {
                            FcateId = "FC00000011",
                            FcateDesc = "Jasmine flowers are renowned for their sweet fragrance, often associated with love, beauty, and sensuality.",
                            FcateName = "Jasmine",
                            FparentCateId = "NULL",
                            IsDeleted = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerTag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TagID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TagId")
                        .HasName("PK__FlowerTa__657CFA4C25F774B1");

                    b.ToTable("FlowerTag", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Notification", b =>
                {
                    b.Property<string>("NotifyId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NotifyID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("NotiAt")
                        .HasColumnType("date");

                    b.Property<string>("NotiBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NotiContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("NotiStatus")
                        .HasColumnType("bit");

                    b.Property<string>("NotiTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NotifyType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotifyId")
                        .HasName("PK__Notifica__AD54A2DC9648A748");

                    b.HasIndex("NotifyType");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.NotificationType", b =>
                {
                    b.Property<string>("NotifyType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NtypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NTypeDesc");

                    b.HasKey("NotifyType")
                        .HasName("PK__Notifica__15D2A72BB930D686");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DeliveryUnit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAFDCD4601F");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderDetailID");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AdminID");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderID");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("PaidPrice")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C486AEBD5");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PayoutHistory", b =>
                {
                    b.Property<string>("PayoutId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PayoutID");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PayoutDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.HasKey("PayoutId")
                        .HasName("PK__PayoutHi__35C3DFAE155177B1");

                    b.HasIndex("UserId");

                    b.ToTable("PayoutHistory", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PostDetail", b =>
                {
                    b.Property<string>("PdetailId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PDetailID");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.HasKey("PdetailId")
                        .HasName("PK__PostDeta__61D4FFEBFE50ED0F");

                    b.HasIndex("FlowerId");

                    b.ToTable("PostDetail", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ReportID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__D5BD48E5D0D0F92F");

                    b.HasIndex("FlowerId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerPost", b =>
                {
                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<int>("HadEvent")
                        .HasColumnType("int")
                        .HasColumnName("hadEvent");

                    b.Property<string>("PdetailId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PDetailID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PostId")
                        .HasName("PK__SellerPo__AA1260382B5E0A50");

                    b.HasIndex("PdetailId");

                    b.ToTable("SellerPost", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerWallet", b =>
                {
                    b.Property<string>("WalletId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WalletID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("WalletId")
                        .HasName("PK__SellerWa__84D4F92E09A9F44F");

                    b.HasIndex("AccountId");

                    b.ToTable("SellerWallet", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TransactionID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B73CCE48A");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("CardName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CardProviderName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SellerAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SellerAvatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACC4A58B01");

                    b.HasIndex("AccountId");

                    b.HasIndex("CardProviderName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = "US00000001",
                            AccountId = "AC00000003",
                            CardName = "NGUYEN MINH PHUONG",
                            CardNumber = "90273928384471924",
                            CardProviderName = "ACB",
                            SellerAddress = "HCM",
                            SellerAvatar = "null",
                            ShopName = "Meraki",
                            TaxNumber = "7286378282"
                        });
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Wishlist", b =>
                {
                    b.Property<string>("WishlistId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WishlistID");

                    b.Property<string>("AddBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.HasKey("WishlistId")
                        .HasName("PK__Wishlist__233189CB00BCD3B5");

                    b.HasIndex("FlowerId");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Event", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.EventCate", "Ecate")
                        .WithMany("Events")
                        .HasForeignKey("EcateId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_ECate");

                    b.Navigation("Ecate");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Feedback", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Flowers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Flowers_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.FlowerCate", "Cate")
                        .WithMany("Flowers")
                        .HasForeignKey("CateId")
                        .IsRequired()
                        .HasConstraintName("FK_Flowers_Cate");

                    b.HasOne("EventFlowerExchange_Espoir.Models.FlowerTag", "Tag")
                        .WithMany("Flowers")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_Flowers_Tag");

                    b.Navigation("Account");

                    b.Navigation("Cate");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Notification", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.NotificationType", "NotifyTypeNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("NotifyType")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Type");

                    b.Navigation("NotifyTypeNavigation");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.OrderDetail", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PayoutHistory", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.User", "User")
                        .WithMany("PayoutHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PayoutHistory_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PostDetail", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("PostDetails")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_PostDetail_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Report", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Reports")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Report_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerPost", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.PostDetail", "Pdetail")
                        .WithMany("SellerPosts")
                        .HasForeignKey("PdetailId")
                        .IsRequired()
                        .HasConstraintName("FK_SellerPost_PostDetail");

                    b.Navigation("Pdetail");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerWallet", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("SellerWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_SellerWallet_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Transaction", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.CardProvider", "CardProviderNameNavigation")
                        .WithMany("Users")
                        .HasForeignKey("CardProviderName")
                        .HasConstraintName("FK_Users_CardProviders");

                    b.Navigation("Account");

                    b.Navigation("CardProviderNameNavigation");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Wishlist", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Wishlists")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Account", b =>
                {
                    b.Navigation("Flowers");

                    b.Navigation("Orders");

                    b.Navigation("SellerWallets");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.CardProvider", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.EventCate", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("PostDetails");

                    b.Navigation("Reports");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerCate", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerTag", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PostDetail", b =>
                {
                    b.Navigation("SellerPosts");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.Navigation("PayoutHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
