// <auto-generated />
using System;
using EventFlowerExchange_Espoir.DatabaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventFlowerExchange_Espoir.Migrations
{
    [DbContext(typeof(EspoirDbContext))]
    [Migration("20241108152523_UpdateDBSetUp")]
    partial class UpdateDBSetUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("IsEmailConfirm")
                        .HasColumnType("int");

                    b.Property<int>("IsSeller")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__349DA586A4DAAC89");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.CardProvider", b =>
                {
                    b.Property<string>("CardProviderName")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("CpfullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CPFullName");

                    b.HasKey("CardProviderName")
                        .HasName("PK__CardProv__3B8DEBCC39ECA32E");

                    b.ToTable("CardProviders");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EventID");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EcateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ECateID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("UpdateAt")
                        .HasColumnType("date");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventId")
                        .HasName("PK__Event__7944C8704F2A4B87");

                    b.HasIndex("EcateId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.EventCate", b =>
                {
                    b.Property<string>("EcateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ECateID");

                    b.Property<string>("Edesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EDesc");

                    b.Property<string>("Ename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EName");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EcateId")
                        .HasName("PK__EventCat__64EE8301B1E91710");

                    b.ToTable("EventCate", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FeedbackID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<bool>("IsGoodReview")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__6A4BEDF6C7713F3E");

                    b.HasIndex("FlowerId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.Property<string>("FlowerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CateId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CateID");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("DateExpiration")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EventId");

                    b.Property<string>("FlowerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<double>("OldPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TagIds")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("TagIds");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("FlowerId")
                        .HasName("PK__Flowers__97C47C3901C1A129");

                    b.HasIndex("AccountId");

                    b.HasIndex("CateId");

                    b.HasIndex("EventId");

                    b.ToTable("Flowers");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerCate", b =>
                {
                    b.Property<string>("FcateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FCateID");

                    b.Property<string>("FcateDesc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FCateDesc");

                    b.Property<string>("FcateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FCateName");

                    b.Property<string>("FparentCateId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FParentCateID");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("FcateId")
                        .HasName("PK__FlowerCa__9CB52A23207E59B9");

                    b.ToTable("FlowerCate", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerTag", b =>
                {
                    b.Property<string>("TagId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TagID");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TagId")
                        .HasName("PK__FlowerTa__657CFA4C25F774B1");

                    b.ToTable("FlowerTag", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Notification", b =>
                {
                    b.Property<string>("NotifyId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NotifyID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("NotiAt")
                        .HasColumnType("date");

                    b.Property<string>("NotiBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NotiContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("NotiStatus")
                        .HasColumnType("bit");

                    b.Property<string>("NotiTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NotifyType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotifyId")
                        .HasName("PK__Notifica__AD54A2DC9648A748");

                    b.HasIndex("NotifyType");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.NotificationType", b =>
                {
                    b.Property<string>("NotifyType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NtypeDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NTypeDesc");

                    b.HasKey("NotifyType")
                        .HasName("PK__Notifica__15D2A72BB930D686");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SellerID");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAFDCD4601F");

                    b.HasIndex("AccountId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderDetailID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountId");

                    b.Property<string>("FlowerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OrderID");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double>("PaidPrice")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D30C486AEBD5");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PayoutHistory", b =>
                {
                    b.Property<string>("PayoutId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PayoutID");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly>("PayoutDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.HasKey("PayoutId")
                        .HasName("PK__PayoutHi__35C3DFAE155177B1");

                    b.HasIndex("UserId");

                    b.ToTable("PayoutHistory", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PostDetail", b =>
                {
                    b.Property<string>("PdetailId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PDetailID");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostId");

                    b.HasKey("PdetailId")
                        .HasName("PK__PostDeta__61D4FFEBFE50ED0F");

                    b.HasIndex("FlowerId");

                    b.HasIndex("PostId");

                    b.ToTable("PostDetail", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ReportID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__D5BD48E5D0D0F92F");

                    b.HasIndex("FlowerId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerPost", b =>
                {
                    b.Property<string>("PostId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PostID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Attachment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("CreateAt")
                        .HasColumnType("date");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("HadEvent")
                        .HasColumnType("int")
                        .HasColumnName("hadEvent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PostId")
                        .HasName("PK__SellerPo__AA1260382B5E0A50");

                    b.HasIndex("EventId");

                    b.ToTable("SellerPost", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerWallet", b =>
                {
                    b.Property<string>("WalletId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WalletID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.HasKey("WalletId")
                        .HasName("PK__SellerWa__84D4F92E09A9F44F");

                    b.HasIndex("AccountId");

                    b.ToTable("SellerWallet", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TransactionID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B73CCE48A");

                    b.HasIndex("AccountId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UserID");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AccountID");

                    b.Property<string>("CardName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CardProviderName")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("SellerAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SellerAvatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACC4A58B01");

                    b.HasIndex("AccountId");

                    b.HasIndex("CardProviderName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Wishlist", b =>
                {
                    b.Property<string>("WishlistId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WishlistID");

                    b.Property<string>("AddBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FlowerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FlowerID");

                    b.HasKey("WishlistId")
                        .HasName("PK__Wishlist__233189CB00BCD3B5");

                    b.HasIndex("FlowerId");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Event", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.EventCate", "Ecate")
                        .WithMany("Events")
                        .HasForeignKey("EcateId")
                        .IsRequired()
                        .HasConstraintName("FK_Event_ECate");

                    b.Navigation("Ecate");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Feedback", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Flowers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Flowers_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.FlowerCate", "Cate")
                        .WithMany("Flowers")
                        .HasForeignKey("CateId")
                        .IsRequired()
                        .HasConstraintName("FK_Flowers_Cate");

                    b.HasOne("EventFlowerExchange_Espoir.Models.Event", "Event")
                        .WithMany("Flowers")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Flowers_Event");

                    b.Navigation("Account");

                    b.Navigation("Cate");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Notification", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.NotificationType", "NotifyTypeNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("NotifyType")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Type");

                    b.Navigation("NotifyTypeNavigation");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Account");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.OrderDetail", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PayoutHistory", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.User", "User")
                        .WithMany("PayoutHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PayoutHistory_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.PostDetail", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("PostDetails")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_PostDetail_Flower");

                    b.HasOne("EventFlowerExchange_Espoir.Models.SellerPost", "Post")
                        .WithMany("PostDetails")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostDetail_SellerPost");

                    b.Navigation("Flower");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Report", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Reports")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Report_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerPost", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Event", "Event")
                        .WithMany("Posts")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_SellerPost_Event");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerWallet", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("SellerWallets")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_SellerWallet_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Transaction", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Order");

                    b.Navigation("Account");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Account");

                    b.HasOne("EventFlowerExchange_Espoir.Models.CardProvider", "CardProviderNameNavigation")
                        .WithMany("Users")
                        .HasForeignKey("CardProviderName")
                        .HasConstraintName("FK_Users_CardProviders");

                    b.Navigation("Account");

                    b.Navigation("CardProviderNameNavigation");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Wishlist", b =>
                {
                    b.HasOne("EventFlowerExchange_Espoir.Models.Flower", "Flower")
                        .WithMany("Wishlists")
                        .HasForeignKey("FlowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Flower");

                    b.Navigation("Flower");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Account", b =>
                {
                    b.Navigation("Flowers");

                    b.Navigation("Orders");

                    b.Navigation("SellerWallets");

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.CardProvider", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Event", b =>
                {
                    b.Navigation("Flowers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.EventCate", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Flower", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("PostDetails");

                    b.Navigation("Reports");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.FlowerCate", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.SellerPost", b =>
                {
                    b.Navigation("PostDetails");
                });

            modelBuilder.Entity("EventFlowerExchange_Espoir.Models.User", b =>
                {
                    b.Navigation("PayoutHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
